// Solution from student - John "Riley" Lynch

PARSER_BEGIN(Parser)

import java.util.ArrayList;
import java.util.List;

public class Parser {
  public static void main(String args[]) throws ParseException {
    Parser parser = new Parser (System.in);
    parser.prog();
  }
}

PARSER_END(Parser)

SKIP:
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | <"%" (~["\n","\r"])* ("\n"|"\r")>
}

TOKEN:
{
    < NIL : ["N","n"] ["I","i"] ["L","l"] >
}

TOKEN:
{
    < LPAR : "(" >
  | < RPAR : ")" >
  | < INTEGER : (["0"-"9"])+ | "-" (["0"-"9"])+ >
  | < LET :"let">
  | < SYMBOL : ["a"-"z", "A"-"Z", "~", "`", "!", "@", "#", "$", "/", "^", "&",
                "*", "_", "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":",
                ";", "<", ">", ",", ".", "?", "'", "\""](["a"-"z", "A"-"Z",
                "0"-"9", "~", "`", "!", "@", "#", "$", "/", "^", "&", "*", "_",
                "-", "=", "+", "{", "}", "[", "]", "|", "\\", ":", ";", "<",
                ">", ",", ".", "?", "'", "\""])* >
}

TOKEN:
{
  < ERROR : ~[] >
}

String atom():
{ Token n; String l; }
{
    n = <NIL>     { return n.image; }
  | n = <INTEGER> { return n.image; }
  | n = <SYMBOL>  { return n.image; } 
}

String list():
{
  String s;
  String ret="";
}
{
  {ret+="(";}
  <LPAR>
  (
    LOOKAHEAD(2) s =  list() { ret += s; }
    | LOOKAHEAD(2) s = let() { ret += " " + s; }
    | s = atom() { ret +=" "+ s; }
  )*
  <RPAR>
  {
    ret+=")";
    return ret;
  }
}

ASTNode let():
{
  String a, b; 
  ASTNode c;
}
{
   <LET>
   <LPAR>
   <LPAR>
   //A
   a = atom()
   //B
   (LOOKAHEAD(2) b = list()
    | LOOKAHEAD(2) b = let() 
    | b = atom()
   )
   <RPAR>
   <RPAR>
   //C
   c = list()   

  {
    return ASTNode.MakeAppNode(ASTNode.MakeFunNode(a, c), b);
  }
}

void prog():
{
  String s;
}
{
  (
      LOOKAHEAD(2) s = list() { System.out.println(s); }
    | s = atom() { System.out.println(s); }
  )* 
  <EOF>
}
