(let ((f (lambda (x y) (+ x y))) (g (lambda (x) (+ x 1)))) (S f g 3))
(K 1 2)
(K (+ 0 1) (+ 0 2))
(let ((f (lambda (x) (+ 1 x)))) (B f f 1))
(let ((f (lambda (x) (+ 1 x))) (g (lambda (x) (* x x)))) (B f g 2))
(let ((f (lambda (x g) (g x)))) (C f (lambda (x) (* x x)) 2))
(let ((f (lambda (x g) (* x (g x))))) (C f (lambda (x) (* x x)) 2))
(letrec ((y (lambda (f) (f (lambda (x) ((y f) x))))))
  (let  ((fact (lambda (f) (lambda (n) (if (= n 0) 1 (* n (f (- n 1))))))))
  ((y fact) 5)))
(let ((fact (lambda (f) (lambda (n) (if (= n 0) 1 (* n (f (- n 1)))))))) ((Y fact) 0))
(let ((fact (lambda (f) (lambda (n) (if (= n 0) 1 (* n (f (- n 1)))))))) ((Y fact) 1))
(let ((fact (lambda (f) (lambda (n) (if (= n 0) 1 (* n (f (- n 1)))))))) ((Y fact) 2))
(let ((fact (lambda (f) (lambda (n) (if (= n 0) 1 (* n (f (- n 1)))))))) ((Y fact) 5))
(let ((fact (lambda (f) (lambda (n) (if (= n 0) 1 (* n (f (- n 1)))))))) ((Y fact) 100))
