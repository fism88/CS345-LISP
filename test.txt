1
(lambda (x) 3)
(lambda (x) x)
(let ((x 4)) 5)
(let ((x 6)) x)
(let ((f (lambda (x) x))) (f 7))
(- 5 4)
(* 5 2)
(/ 4 2)
(/ 5 3)
(let ((x 3)) (let ((f (lambda (y) (+ x y)))) (f 4)))
((lambda (x) (* x x)) 2)
((lambda (f) (f 3)) (lambda (x) (* x x)))
(let ((f (lambda (x y) (+ x y)))) (f 2 3))
(letrec
  ((f (lambda (x) (if (= x 0) 1 (f (- x 1)))))
   (g (lambda (x) (if (= x 0) 2 (g (- x 1)))))
   (h (lambda (x) (if (= x 0) 3 (h (- x 1))))))
  (f (g (h 20))))
(letrec
  ((f (lambda (x) (if (= x 0) 1 (f (- x 1)))))
   (g (lambda (x) (if (= x 0) 2 (f (- x 1)))))
   (h (lambda (x) (if (= x 0) 3 (f (- x 1))))))
  (f (g (h 20))))
